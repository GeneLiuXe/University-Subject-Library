Dump of assembler code for function phase_2:
   0x00400dbc <+0>:	addiu	sp,sp,-64 	      
   // sp = sp-64
   0x00400dc0 <+4>:	sw	ra,60(sp)		      
   // memory[$sp+60] = $ra
   0x00400dc4 <+8>:	sw	s8,56(sp)
   0x00400dc8 <+12>:	move	s8,sp		              
   // 数据传送
   0x00400dcc <+16>:	lui	gp,0x42          
   //$gp = 66*65536
   
   0x00400dd0 <+20>:	addiu	gp,gp,-20080   
   0x00400dd4 <+24>:	sw	gp,16(sp)
   0x00400dd8 <+28>:	sw	a0,64(s8)
   0x00400ddc <+32>:	addiu	v0,s8,28
   0x00400de0 <+36>:	lw	a0,64(s8)      //$a0 = memory[$s8+64]
   0x00400de4 <+40>:	move	a1,v0
   // $a1 = $v0
   0x00400de8 <+44>:	jal	0x401ba8 <read_six_numbers> //跳到地址0x401ba8，跳出函数
   0x00400dec <+48>:	nop                  //停
   0x00400df0 <+52>:	lw	gp,16(s8)
   0x00400df4 <+56>:	lw	v1,28(s8)
   0x00400df8 <+60>:	li	v0,1              //将1加载到vo中
   0x00400dfc <+64>:	beq	v1,v0,0x400e10 <phase_2+84>
   //v1与v0内容相同时，跳转
   0x00400e00 <+68>:	nop
   0x00400e04 <+72>:	jal	0x4021f0 <explode_bomb>
   0x00400e08 <+76>:	nop
   0x00400e0c <+80>:	lw	gp,16(s8)
   0x00400e10 <+84>:	li	v0,1        //将1加载到v0中
   0x00400e14 <+88>:	sw	v0,24(s8)
   0x00400e18 <+92>:	b	0x400ea8 <phase_2+236>
   0x00400e1c <+96>:	nop
   
   //循环开始
   0x00400e20 <+100>:	lw	v0,24(s8)     //*********************************************循环开始
   0x00400e24 <+104>:	nop
   0x00400e28 <+108>:	addiu	v0,v0,-1
   0x00400e2c <+112>:	sll	v0,v0,0x2
   //$v0 = $v0 << 2
   0x00400e30 <+116>:	addiu	v1,s8,24
   //v1变得很大
   0x00400e34 <+120>:	addu	v0,v1,v0
   //$v0 = $v1+$v0
   0x00400e38 <+124>:	lw	a0,4(v0)
   //读取一个字给a0
   0x00400e3c <+128>:	li	v1,12
   //将12加载到v1中
   0x00400e40 <+132>:	lw	v0,24(s8)
   //break
   0x00400e44 <+136>:	nop
   0x00400e48 <+140>:	subu	v0,v1,v0
   //$v0 = $v1-$v0 
   0x00400e4c <+144>:	lw	v1,-32660(gp)
   0x00400e50 <+148>:	sll	v0,v0,0x2
   // v0 = v0 << 2
   0x00400e54 <+152>:	addu	v0,v1,v0
   0x00400e58 <+156>:	lw	v0,0(v0)
   //从存储器中读取一个字的数据到寄存器中
   0x00400e5c <+160>:	nop
   0x00400e60 <+164>:	mult	a0,v0   //break
   0x00400e64 <+168>:	mflo	a0
   0x00400e68 <+172>:	lw	v0,24(s8)  //break
   0x00400e6c <+176>:	nop
   0x00400e70 <+180>:	sll	v0,v0,0x2  //v0摇摆不定，迷惑
   0x00400e74 <+184>:	addiu	v1,s8,24
   0x00400e78 <+188>:	addu	v0,v1,v0
   0x00400e7c <+192>:	lw	v0,4(v0)   // v0变成下一个输入的数
   0x00400e80 <+196>:	nop
   0x00400e84 <+200>:	beq	a0,v0,0x400e98 <phase_2+220> 
   //beq 当两个寄存器内容相同时，发生跳转
   0x00400e88 <+204>:	nop
   0x00400e8c <+208>:	jal	0x4021f0 <explode_bomb>
   0x00400e90 <+212>:	nop
   0x00400e94 <+216>:	lw	gp,16(s8)
   0x00400e98 <+220>:	lw	v0,24(s8)
   //把存储器中数据读到v0中
   0x00400e9c <+224>:	nop
   0x00400ea0 <+228>:	addiu	v0,v0,1   //i++
   0x00400ea4 <+232>:	sw	v0,24(s8)
   //把一个字的信息从寄存器存储到存储器中
   0x00400ea8 <+236>:	lw	v0,24(s8)
   0x00400eac <+240>:	nop
   0x00400eb0 <+244>:	slti	v0,v0,6
   //v0小于6，则为1，否则为0
   0x00400eb4 <+248>:	bnez	v0,0x400e20 <phase_2+100> //***********************************循环结束
   // 当v0为0时，跳转，循环结束
   
   0x00400eb8 <+252>:	nop
   0x00400ebc <+256>:	move	sp,s8
   0x00400ec0 <+260>:	lw	ra,60(sp)
   0x00400ec4 <+264>:	lw	s8,56(sp)
   0x00400ec8 <+268>:	addiu	sp,sp,64
   0x00400ecc <+272>:	jr	ra
   0x00400ed0 <+276>:	nop
End of assembler dump.

1 1 1 0 0 0

//根据e84断点处a0的值来确定下一个v0的值
//lw v0,4(v0) 变成输入值的下一个

